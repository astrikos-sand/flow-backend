version: "3.8"

services:
  backend:
    container_name: astrikos_backend
    build:
      context: .
      dockerfile: docker/dev.Dockerfile
    image: astrikos_backend
    env_file: .env
    ports:
      - "8000:8000"
    volumes:
      - ./apps/:/astrikos/apps/
      - ./config/:/astrikos/config/
      - ./requirements.txt:/astrikos/requirements.txt
      - ./manage.py:/astrikos/manage.py
      - ./mongodb:/astrikos/mongodb
    depends_on:
      db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      broker:
        condition: service_healthy

  db:
    image: postgres:16-alpine
    container_name: astrikos_db
    hostname: ${POSTGRES_HOST}
    env_file: .env
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "${POSTGRES_USER}",
          "-d",
          "${POSTGRES_DB}",
          "-h",
          "${POSTGRES_HOST}"
        ]
      interval: 5s
      retries: 5
      timeout: 5s

  mongodb:
    image: mongo:7.0.6
    container_name: astrikos_mongodb
    hostname: ${MONGO_INITDB_HOST}
    env_file: .env
    environment:
      - URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@${MONGO_INITDB_HOST}:27017/${MONGO_INITDB_DATABASE}?authSource=admin
    volumes:
      - mongodb:/data/db
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "${URI}",
          "--eval",
          "db.runCommand('ping')"
        ]
      interval: 5s
      retries: 5
      timeout: 5s

  broker:
    image: rabbitmq:3.13.0-alpine
    container_name: astrikos_broker
    hostname: ${RABBITMQ_HOST}
    env_file: .env
    volumes:
      - broker:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      retries: 5
      timeout: 5s

volumes:
  db:
  mongodb:
  broker:
