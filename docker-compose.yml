services:
  backend:
    container_name: astrikos_backend
    build:
      context: .
      dockerfile: docker/dev.Dockerfile
    image: astrikos_backend
    env_file: .env
    ports:
      - "8000:8000"
    volumes:
      - ./apps/:/astrikos/apps/
      - ./config/:/astrikos/config/
      - ./media:/astrikos/media
      - ./requirements.txt:/astrikos/requirements.txt
      - ./manage.py:/astrikos/manage.py
      - ./mongodb:/astrikos/mongodb
      - ./influx:/astrikos/influx
    networks:
      - db
      - broker
    depends_on:
      db:
        condition: service_healthy
      influxdb:
        condition: service_healthy

  db:
    image: postgres:16-alpine
    container_name: astrikos_db
    hostname: ${POSTGRES_HOST}
    env_file: .env
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - db
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "${POSTGRES_USER}",
          "-d",
          "${POSTGRES_DB}",
          "-h",
          "${POSTGRES_HOST}"
        ]
      interval: 5s
      retries: 5
      timeout: 5s

  celery:
    container_name: astrikos_celery
    build:
      context: .
      dockerfile: docker/dev.Dockerfile
    command: celery -A config worker --loglevel=info
    image: astrikos_celery
    env_file: .env
    networks:
      - broker
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "inspect","ping"]
      interval: 5s
      retries: 5
      timeout: 5s

  celery-beat:
    container_name: astrikos_celery_beat
    build:
      context: .
      dockerfile: docker/dev.Dockerfile
    command: celery -A config beat --loglevel=info
    image: astrikos_celery_beat
    env_file: .env
    networks:
      - broker
      - db
    depends_on:
      broker:
        condition: service_healthy
      db:
        condition: service_healthy
      backend:
        condition: service_started
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "inspect","ping"]
      interval: 5s
      retries: 5
      timeout: 5s

  broker:
    image: rabbitmq:3.13.0-alpine
    container_name: astrikos_broker
    hostname: ${RABBITMQ_HOST}
    ports:
      - "15672:15672"
    env_file: .env
    networks:
      - broker
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      retries: 5
      timeout: 5s
    
  influxdb:
    image: influxdb:2.7-alpine
    container_name: astrikos_influxdb
    hostname: ${INFLUXDB_HOST}
    env_file: .env
    ports:
      - "8086:8086"
    volumes:
      - influxdb:/var/lib/influxdb
    networks:
      - db
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 5s
      retries: 5
      timeout: 5s

volumes:
  db:
  influxdb:

networks:
  db:
  broker:
